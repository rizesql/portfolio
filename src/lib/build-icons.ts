/* eslint-disable no-console */
import * as path from "node:path";

import fsExtra from "fs-extra";
import { glob } from "glob";
import { parse } from "node-html-parser";

void main();
async function main() {
	const cwd = process.cwd();
	const inputDir = path.join(cwd, "src", "components", "ui", "icons");
	const inputDirRelative = path.relative(cwd, inputDir);
	const outputDir = path.join(cwd, "src", "components", "ui", "icons", "generated");

	const files = glob
		.sync("**/*.svg", {
			cwd: inputDir,
		})
		.sort((a, b) => a.localeCompare(b));

	const shouldVerboseLog = process.argv.includes("--log=verbose");
	const logVerbose = shouldVerboseLog ? console.log : () => {};

	if (files.length === 0) {
		console.log(`No SVG files found in ${inputDirRelative}`);
		process.exit(0);
	}

	const spriteFilepath = path.join(outputDir, "sprite.svg");
	const typeOutputFilepath = path.join(outputDir, "names.ts");
	const currentSprite = await fsExtra.readFile(spriteFilepath, "utf8").catch(() => "");
	const currentTypes = await fsExtra.readFile(typeOutputFilepath, "utf8").catch(() => "");

	const iconNames = files.map((file) => iconName(file));

	const spriteUpToDate = iconNames.every((name) => currentSprite.includes(name));
	const typesUpToDate = iconNames.every((name) => currentTypes.includes(name));

	if (spriteUpToDate && typesUpToDate) {
		console.log(`Icons are up to date`);
		process.exit(0);
	}

	logVerbose(`Generating sprite for ${inputDirRelative}`);

	await fsExtra.emptyDir(outputDir);

	const output = await generateSvgSprite({
		files,
		inputDir,
	});

	await writeIfChanged(spriteFilepath, output);

	for (const file of files) {
		logVerbose("âœ…", file);
	}
	logVerbose(`Saved to ${path.relative(cwd, spriteFilepath)}`);

	const typeOutputContent = generateTypes({
		names: files.map((file) => iconName(file)).map((name) => JSON.stringify(name)),
	});

	await writeIfChanged(typeOutputFilepath, typeOutputContent);

	logVerbose(`Manifest saved to ${path.relative(cwd, typeOutputFilepath)}`);

	await writeIfChanged(
		path.join(outputDir, "README.md"),
		[
			"# Icons",
			"",
			"This directory contains SVG icons that are used by the app.",
			"",
			"Everything in this directory is generated by `npm run build:icons`.",
		].join("\n"),
	);
	console.log(`Generated ${files.length} icons`);
}

/**
 * Creates a single SVG file that contains all the icons
 */
export async function generateSvgSprite({
	files,
	inputDir,
}: {
	files: string[];
	inputDir: string;
}) {
	// Each SVG becomes a symbol and we wrap them all in a single SVG
	const symbols = await Promise.all(
		files.map(async (file) => {
			const input = await fsExtra.readFile(path.join(inputDir, file), "utf8");
			const root = parse(input);

			const svg = root.querySelector("svg");
			if (!svg) throw new Error("No SVG element found");

			svg.tagName = "symbol";
			svg.setAttribute("id", iconName(file));
			svg.removeAttribute("xmlns");
			svg.removeAttribute("xmlns:xlink");
			svg.removeAttribute("version");
			svg.removeAttribute("width");
			svg.removeAttribute("height");

			return svg.toString().trim();
		}),
	);

	const output = [
		`<?xml version="1.0" encoding="UTF-8"?>`,
		`<!-- This file is generated by npm run build:icons -->`,
		`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">`,
		`<defs>`, // for semantics: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs
		...symbols,
		`</defs>`,
		`</svg>`,
		"",
	].join("\n");

	return output;
}

function iconName(file: string) {
	return file.replace(/\.svg$/, "");
}

function generateTypes({ names }: { names: string[] }) {
	return [
		`// This file is generated by npm run build:icons`,
		"",
		`export type Icon =`,
		...names.map((name) => `\t| ${name}`),
		"",
	].join("\n");
}

/**
 * Each write can trigger dev server reloads, so we only write if the content has changed
 */
async function writeIfChanged(filepath: string, newContent: string) {
	const currentContent = await fsExtra.readFile(filepath, "utf8").catch(() => "");
	if (currentContent === newContent) return;
	await fsExtra.writeFile(filepath, newContent, "utf8");
}
